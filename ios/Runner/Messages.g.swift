// Autogenerated from Pigeon (v17.1.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> FlutterError {
  return FlutterError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct AudioData {
  var url: String
  var track: Track

  static func fromList(_ list: [Any?]) -> AudioData? {
    let url = list[0] as! String
    let track = Track.fromList(list[1] as! [Any?])!

    return AudioData(
      url: url,
      track: track
    )
  }
  func toList() -> [Any?] {
    return [
      url,
      track.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PlaybackState {
  var isPlaying: Bool
  var isBuffering: Bool
  var isSeeking: Bool
  var isCompleted: Bool
  var position: Int64
  var duration: Int64
  var speed: Speed
  var volume: Int64
  var track: Track
  var backgroundSound: BackgroundSound? = nil

  static func fromList(_ list: [Any?]) -> PlaybackState? {
    let isPlaying = list[0] as! Bool
    let isBuffering = list[1] as! Bool
    let isSeeking = list[2] as! Bool
    let isCompleted = list[3] as! Bool
    let position = list[4] is Int64 ? list[4] as! Int64 : Int64(list[4] as! Int32)
    let duration = list[5] is Int64 ? list[5] as! Int64 : Int64(list[5] as! Int32)
    let speed = Speed.fromList(list[6] as! [Any?])!
    let volume = list[7] is Int64 ? list[7] as! Int64 : Int64(list[7] as! Int32)
    let track = Track.fromList(list[8] as! [Any?])!
    var backgroundSound: BackgroundSound? = nil
    if let backgroundSoundList: [Any?] = nilOrValue(list[9]) {
      backgroundSound = BackgroundSound.fromList(backgroundSoundList)
    }

    return PlaybackState(
      isPlaying: isPlaying,
      isBuffering: isBuffering,
      isSeeking: isSeeking,
      isCompleted: isCompleted,
      position: position,
      duration: duration,
      speed: speed,
      volume: volume,
      track: track,
      backgroundSound: backgroundSound
    )
  }
  func toList() -> [Any?] {
    return [
      isPlaying,
      isBuffering,
      isSeeking,
      isCompleted,
      position,
      duration,
      speed.toList(),
      volume,
      track.toList(),
      backgroundSound?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct BackgroundSound {
  var uri: String? = nil
  var title: String

  static func fromList(_ list: [Any?]) -> BackgroundSound? {
    let uri: String? = nilOrValue(list[0])
    let title = list[1] as! String

    return BackgroundSound(
      uri: uri,
      title: title
    )
  }
  func toList() -> [Any?] {
    return [
      uri,
      title,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Speed {
  var speed: Double

  static func fromList(_ list: [Any?]) -> Speed? {
    let speed = list[0] as! Double

    return Speed(
      speed: speed
    )
  }
  func toList() -> [Any?] {
    return [
      speed
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct Track {
  var title: String
  var description: String
  var imageUrl: String
  var artist: String? = nil
  var artistUrl: String? = nil

  static func fromList(_ list: [Any?]) -> Track? {
    let title = list[0] as! String
    let description = list[1] as! String
    let imageUrl = list[2] as! String
    let artist: String? = nilOrValue(list[3])
    let artistUrl: String? = nilOrValue(list[4])

    return Track(
      title: title,
      description: description,
      imageUrl: imageUrl,
      artist: artist,
      artistUrl: artistUrl
    )
  }
  func toList() -> [Any?] {
    return [
      title,
      description,
      imageUrl,
      artist,
      artistUrl,
    ]
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol MeditoAndroidAudioServiceManager {
  func startService() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class MeditoAndroidAudioServiceManagerSetup {
  /// The codec used by MeditoAndroidAudioServiceManager.
  /// Sets up an instance of `MeditoAndroidAudioServiceManager` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: MeditoAndroidAudioServiceManager?) {
    let startServiceChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.Medito.MeditoAndroidAudioServiceManager.startService", binaryMessenger: binaryMessenger)
    if let api = api {
      startServiceChannel.setMessageHandler { _, reply in
        do {
          try api.startService()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startServiceChannel.setMessageHandler(nil)
    }
  }
}
private class MeditoAudioServiceApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return AudioData.fromList(self.readValue() as! [Any?])
    case 129:
      return Track.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class MeditoAudioServiceApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? AudioData {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? Track {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MeditoAudioServiceApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MeditoAudioServiceApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MeditoAudioServiceApiCodecWriter(data: data)
  }
}

class MeditoAudioServiceApiCodec: FlutterStandardMessageCodec {
  static let shared = MeditoAudioServiceApiCodec(readerWriter: MeditoAudioServiceApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol MeditoAudioServiceApi {
  func playAudio(audioData: AudioData) throws -> Bool
  func playPauseAudio() throws
  func stopAudio() throws
  func setSpeed(speed: Double) throws
  func seekToPosition(position: Int64) throws
  func skip10SecondsForward() throws
  func skip10SecondsBackward() throws
  func setBackgroundSound(uri: String?) throws
  func setBackgroundSoundVolume(volume: Double) throws
  func stopBackgroundSound() throws
  func playBackgroundSound() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class MeditoAudioServiceApiSetup {
  /// The codec used by MeditoAudioServiceApi.
  static var codec: FlutterStandardMessageCodec { MeditoAudioServiceApiCodec.shared }
  /// Sets up an instance of `MeditoAudioServiceApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: MeditoAudioServiceApi?) {
    let playAudioChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.Medito.MeditoAudioServiceApi.playAudio", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      playAudioChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let audioDataArg = args[0] as! AudioData
        do {
          let result = try api.playAudio(audioData: audioDataArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      playAudioChannel.setMessageHandler(nil)
    }
    let playPauseAudioChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.Medito.MeditoAudioServiceApi.playPauseAudio", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      playPauseAudioChannel.setMessageHandler { _, reply in
        do {
          try api.playPauseAudio()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      playPauseAudioChannel.setMessageHandler(nil)
    }
    let stopAudioChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.Medito.MeditoAudioServiceApi.stopAudio", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopAudioChannel.setMessageHandler { _, reply in
        do {
          try api.stopAudio()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopAudioChannel.setMessageHandler(nil)
    }
    let setSpeedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.Medito.MeditoAudioServiceApi.setSpeed", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setSpeedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let speedArg = args[0] as! Double
        do {
          try api.setSpeed(speed: speedArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setSpeedChannel.setMessageHandler(nil)
    }
    let seekToPositionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.Medito.MeditoAudioServiceApi.seekToPosition", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      seekToPositionChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let positionArg = args[0] is Int64 ? args[0] as! Int64 : Int64(args[0] as! Int32)
        do {
          try api.seekToPosition(position: positionArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      seekToPositionChannel.setMessageHandler(nil)
    }
    let skip10SecondsForwardChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.Medito.MeditoAudioServiceApi.skip10SecondsForward", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      skip10SecondsForwardChannel.setMessageHandler { _, reply in
        do {
          try api.skip10SecondsForward()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      skip10SecondsForwardChannel.setMessageHandler(nil)
    }
    let skip10SecondsBackwardChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.Medito.MeditoAudioServiceApi.skip10SecondsBackward", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      skip10SecondsBackwardChannel.setMessageHandler { _, reply in
        do {
          try api.skip10SecondsBackward()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      skip10SecondsBackwardChannel.setMessageHandler(nil)
    }
    let setBackgroundSoundChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.Medito.MeditoAudioServiceApi.setBackgroundSound", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setBackgroundSoundChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let uriArg: String? = nilOrValue(args[0])
        do {
          try api.setBackgroundSound(uri: uriArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setBackgroundSoundChannel.setMessageHandler(nil)
    }
    let setBackgroundSoundVolumeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.Medito.MeditoAudioServiceApi.setBackgroundSoundVolume", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setBackgroundSoundVolumeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let volumeArg = args[0] as! Double
        do {
          try api.setBackgroundSoundVolume(volume: volumeArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setBackgroundSoundVolumeChannel.setMessageHandler(nil)
    }
    let stopBackgroundSoundChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.Medito.MeditoAudioServiceApi.stopBackgroundSound", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopBackgroundSoundChannel.setMessageHandler { _, reply in
        do {
          try api.stopBackgroundSound()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopBackgroundSoundChannel.setMessageHandler(nil)
    }
    let playBackgroundSoundChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.Medito.MeditoAudioServiceApi.playBackgroundSound", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      playBackgroundSoundChannel.setMessageHandler { _, reply in
        do {
          try api.playBackgroundSound()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      playBackgroundSoundChannel.setMessageHandler(nil)
    }
  }
}
private class MeditoAudioServiceCallbackApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return BackgroundSound.fromList(self.readValue() as! [Any?])
    case 129:
      return PlaybackState.fromList(self.readValue() as! [Any?])
    case 130:
      return Speed.fromList(self.readValue() as! [Any?])
    case 131:
      return Track.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class MeditoAudioServiceCallbackApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? BackgroundSound {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? PlaybackState {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? Speed {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? Track {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MeditoAudioServiceCallbackApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MeditoAudioServiceCallbackApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MeditoAudioServiceCallbackApiCodecWriter(data: data)
  }
}

class MeditoAudioServiceCallbackApiCodec: FlutterStandardMessageCodec {
  static let shared = MeditoAudioServiceCallbackApiCodec(readerWriter: MeditoAudioServiceCallbackApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol MeditoAudioServiceCallbackApiProtocol {
  func updatePlaybackState(state stateArg: PlaybackState, completion: @escaping (Result<Void, FlutterError>) -> Void)
}
class MeditoAudioServiceCallbackApi: MeditoAudioServiceCallbackApiProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger) {
    self.binaryMessenger = binaryMessenger
  }
  var codec: FlutterStandardMessageCodec {
    return MeditoAudioServiceCallbackApiCodec.shared
  }
  func updatePlaybackState(state stateArg: PlaybackState, completion: @escaping (Result<Void, FlutterError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.Medito.MeditoAudioServiceCallbackApi.updatePlaybackState"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([stateArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(FlutterError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
